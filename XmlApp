import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import org.xml.sax.InputSource;
import java.io.StringReader;

public class XmlApp extends JFrame {
    private JTable table;
    private DefaultTableModel tableModel;

    public XmlApp() {
        setTitle("Lectura XML");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);

        tableModel = new DefaultTableModel();
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);

        JButton openButton = new JButton("Abrir archivo XML");
        openButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int result = fileChooser.showOpenDialog(null);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    cargarXML(selectedFile);
                }
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(openButton);

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(buttonPanel, BorderLayout.NORTH);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
    }

    private void cargarXML(File archivo) {
        try {
            tableModel.setRowCount(0);

            SAXParserFactory factory = SAXParserFactory.newInstance();
            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
            SAXParser saxParser = factory.newSAXParser();
            DefaultHandler handler = new DefaultHandler() {
                private StringBuilder currentValue;
                private String currentElement;
                private String[] rowData;

                @Override
                public void startElement(String uri, String localName, String qName, Attributes attributes)
                        throws SAXException {
                    if ("CATALOG".equals(qName)) {
                        String[] columns = {"TITLE", "ARTIST", "COUNTRY", "COMPANY", "PRICE", "YEAR"};
                        tableModel.setColumnIdentifiers(columns);
                    } else if ("CD".equals(qName)) {
                        rowData = new String[tableModel.getColumnCount()];
                    }
                    currentElement = qName;
                    currentValue = new StringBuilder();
                }

                @Override
                public void characters(char[] ch, int start, int length) throws SAXException {
                    if (currentValue != null) {
                        currentValue.append(ch, start, length);
                    }
                }

                @Override
                public void endElement(String uri, String localName, String qName) throws SAXException {
                    if ("CD".equals(qName)) {
                        tableModel.addRow(rowData);
                    } else if (currentElement != null) {
                        int columnIndex = tableModel.findColumn(currentElement);
                        if (columnIndex >= 0) {
                            rowData[columnIndex] = currentValue.toString().trim();
                        }
                    }
                    currentElement = null;
                    currentValue = null;
                }
            };

            saxParser.parse(archivo, handler);

            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar el archivo XML", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

