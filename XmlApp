import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class XmlApp extends JFrame {
    private JTable table;
    private DefaultTableModel tableModel;

    public XmlApp() {
        setTitle("Lectura XML");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);

        tableModel = new DefaultTableModel();
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);

        JButton openButton = new JButton("Abrir archivo XML");
        openButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int result = fileChooser.showOpenDialog(null);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    cargarXML(selectedFile);
                }
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(openButton);

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(buttonPanel, BorderLayout.NORTH);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
    }

    private void cargarXML(File archivo) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            // Deshabilitar la validaciÃ³n del DTD
            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(archivo);
            tableModel.setRowCount(0);

            NodeList cdList = doc.getElementsByTagName("CD");

            if (cdList.getLength() > 0) {
                Element firstCD = (Element) cdList.item(0);
                NodeList childNodes = firstCD.getChildNodes();

                for (int i = 0; i < childNodes.getLength(); i++) {
                    if (childNodes.item(i) instanceof Element) {
                        String columnName = childNodes.item(i).getNodeName();
                        tableModel.addColumn(columnName);
                    }
                }
            }

            for (int i = 0; i < cdList.getLength(); i++) {
                Element cd = (Element) cdList.item(i);
                NodeList cdData = cd.getChildNodes();

                String[] rowData = new String[tableModel.getColumnCount()];

                for (int j = 0; j < cdData.getLength(); j++) {
                    if (cdData.item(j) instanceof Element) {
                        String columnName = cdData.item(j).getNodeName();
                        String columnValue = cdData.item(j).getTextContent();
                        rowData[tableModel.findColumn(columnName)] = columnValue;
                    }
                }

                tableModel.addRow(rowData);
            }

            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar el archivo XML", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

}
